devtools::load_all()
gcaApp()
devtools::load_all(".")
gcaApp()
runApp('~/Documents/testapp')
runApp('~/Documents/testapp')
devtools::load_all(".")
gcaApp()
#-----------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
#Geography analysis
#' @import shiny ggplot2
NULL
runApp('~/Documents/testapp')
runApp('~/Documents/testapp')
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
gcaApp()
devtools::load_all(".")
devtools::load_all(".")
gcaApp()
gcaApp()
"""possible explanations:
NS missing
wrong id
plotter functions never called
"""
devtools::load_all(".")
gcaApp()
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
gcaApp()
gcaApp()
gcaApp()
gcaApp()
gcaApp()
gcaApp()
gcaApp()
devtools::gcaApp()
devtools::load_all()
gcaApp()
gcaApp()
plotGeoInc(testdata)
testdata
test1<- sumOverGroups(testdata)
plotGeoInc(test1)
devtools::load_all(".")
gcaApp()
plotGeoInc(test1)
devtools::load_all()
plotGeoInc(test1)
devtools::load_all()
plotGeoInc(test1)
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
scale_colour_discrete <- function(...) { scale_colour_manual(..., values = c("yellow","green")) }
devtools::load_all(".")
plotGeoInc(test1)
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
plotGeoInc(test1)
devtools::load_all(".")
plotGeoInc(test1)
plotGeoInc(test1)
devtools::load_all(".")
plotGeoInc(test1)
devtools::load_all(".")
plotGeoInc(test1)
plotGeoInc(ttest1)
plotGeoInc(test1)
devtools::load_all(".")
roxygen2::roxygenize()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
plotGeoInc(test1)
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
4*4
5*20
5*4
/12
20/12
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
ggplot2::label("hei")
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all()
gcaApp()
gcaApp()
devtools::load_all(".")
gcaApp()
?labs
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
:O
L
Ll
lll
lll
"lll"
"eeeeeeeeeee"
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
install.package("nordpred")
install.packages("nordpred")
source('nordpred.R')
devtools::load_all()
gcaApp()
?geofacet
ggplot(state_ranks, aes(variable, rank, fill = variable)) +
geom_col() +
coord_flip() +
facet_geo(~ state) +
theme_bw()
g =ggplot(state_ranks, aes(variable, rank, fill = variable)) +
geom_col() +
facet_geo(~ state) +
facet_grid(labely~labelx, scales='free_x', space='free_x')
g
g =ggplot(state_ranks, aes(variable, rank, fill = variable)) +
geom_col() +
facet_geo(~ state, scales='free_x', space='free_y')
g =ggplot(state_ranks, aes(variable, rank, fill = variable)) +
geom_col() +
facet_geo(~ state, scales='free_x', spaces='free_y')
g =ggplot(state_ranks, aes(variable, rank, fill = variable)) +
geom_col() +
facet_geo(~ state, scales='free_x')
g =ggplot(state_ranks, aes(variable, rank, fill = variable)) +
geom_col() +
facet_geo(~ state, scales='free_x')
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
gt$widths[4] = 4*gt$widths[4]
grid.draw(gt)
library(grid)
gt = ggplot_gtable(ggplot_build(g))
gt$widths[4] = 10*gt$widths[4]
grid.draw(gt)
geofacet::af_prov_grid1
devtools::load_all()
roxygen2::roxygenize()
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
gcaApp()
vignette("ggplot2-specs")
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
head(hvaharvi)
==0
head(hvaharvi)
hvaharvi$incPer100k <- as.integer(with(hvaharvi, incidence * (1e5/population)))
hvaharvi$mortPer100k <- as.integer(with(hvaharvi, mortality * (1e5/population)))
df$newIncRate <- with(df, incPer100k*as.numeric(weights[as.character(agegroup)]))
df <- hvaharvi
df$newIncRate <- with(df, incPer100k*as.numeric(weights[as.character(agegroup)]))
df$newMortRate <- with(df, mortPer100k*as.numeric(weights[as.character(agegroup)]))
result <- dplyr::summarise(dplyr::group_by(df,
period = period,
FedState = FedState,
available,
complete),
incidence = sum(incidence),
mortality = sum(mortality),
population =sum(population))
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
devtools::load_all(".")
gcaApp()
vignette('nordpred')
inpop <- cbind(inpop1, inpop2)
est <- nordpred.estimate(cases=indata, pyr = inpop, noperiod = 4, startestage = 5)
))
?nordpred
??nordpred
install.packages("BAPC", repos="http://R-Forge.R-project.org")
install.packages("BAPC", repos="http://R-Forge.R-project.org")
library(BAPC)
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("caTools")
install.packages("Epi")
install.packages("fanplot")
install.packages("BAPC", repos="http://R-Forge.R-project.org”)
>
)
))
}
sao
åck
w2d
oåqw
ofkeqa
åoe
åcd
oprint("")
)))))
\end
install.packages("BAPC",repos="http://R-Forge.R-project.org”)
)
\
{\\}
\en
install.packages("BAPC")
install.packages("BAPC", repos="http://R-Forge.R-project.org”)
)
)
\e
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
vignette("BAPC")
vignette("nordpred")
vignette("nordPred")
vignette("bcap")
help(BAPC)
# load the library BAPC
library(BAPC)
# read the mortality and population counts.
# The rownames (i.e. periods 1950-2007) are given in the first column.
counts = read.table("us_data_2014.txt", row.names=1, header=F)
pop = read.table("us_pop_2014.txt", row.names=1, header=F)
# define the labels for the 12 age groups
agegroup = c("25-29", "30-34", "35-39", "40-44",
"45-49", "50-54", "55-59", "60-64",
"65-69", "70-74", "75-79", "80-84")
# define an object of class APCList were you specify
# the dataset together with the grid factor (here M=5)
# and the labels of the age groups.
us.APC = APCList(counts, pop, gf=5, agelab=agegroup)
# generate Figure 1
col <- c("grey20", "grey35", "grey50", "grey65", "grey75", "grey85")
ratesByAge(us.APC, scale=100000, age=seq(27,82,5), per=1950:2007, col=col)
# perform retrospective projection for 10 years, see section 5
us.res = BAPC(us.APC, predict=list(npredict=10, retro=TRUE))
# to generate figure 2 in the paper use the following command
plotBAPC(us.res, scale=100000, type="ageSpecBoth",
coladd="grey80", showdata=TRUE)
library(BAPC)
# load the library BAPC
library(BAPC)
# read the mortality and population counts.
# The rownames (i.e. periods 1950-2007) are given in the first column.
counts = read.table("us_data_2014.txt", row.names=1, header=F)
pop = read.table("us_pop_2014.txt", row.names=1, header=F)
# define the labels for the 12 age groups
agegroup = c("25-29", "30-34", "35-39", "40-44",
"45-49", "50-54", "55-59", "60-64",
"65-69", "70-74", "75-79", "80-84")
# define an object of class APCList were you specify
# the dataset together with the grid factor (here M=5)
# and the labels of the age groups.
us.APC = APCList(counts, pop, gf=5, agelab=agegroup)
# generate Figure 1
col <- c("grey20", "grey35", "grey50", "grey65", "grey75", "grey85")
ratesByAge(us.APC, scale=100000, age=seq(27,82,5), per=1950:2007, col=col)
# perform retrospective projection for 10 years, see section 5
us.res = BAPC(us.APC, predict=list(npredict=10, retro=TRUE))
# to generate figure 2 in the paper use the following command
plotBAPC(us.res, scale=100000, type="ageSpecBoth",
coladd="grey80", showdata=TRUE)
x=2
setwd("~/Documents/gca")
weights
devtools::load_all()
devtools::install("gca")
install.packages("DT")
install.packages("reshape2")
install.packages("directlabels")
devtools::load_all()
gcaApp()
fluidPage(
titlePanel("Choose data"),
radioButtons(NS(id,"dataOld"), "choose from existing data",
choices=c("prostate", "breast", "lung")),
radioButtons(NS(id,"which"), "Use uploaded or existing data set?",
choices = c("uploaded", "existing"),
selected= "existing"),
fileInput("upload1", "incidence",  width='30%'),
fileInput("upload2", "population", width='30%'),
fileInput("upload3", "mortality",  width='30%'),
actionButton("submit", label="Submit"))
devtools::load_all()
gv
ca
gcaApp()
devtools::load_all()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
install.packages("shinydashboard")
devtools::install("shinydashboard")
devtools::load_all()
library(BAPC)
gcaApp()
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
gcaApp()
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
devtools:
)
devtools
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
gcaApp()
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
gcaApp()
gcaApp()
runApp('R')
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
gcaApp()
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
gcaApp()
runApp('~/Documents/blabla')
runApp('~/Documents/blabla')
runApp('~/Documents/blabla')
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
runApp('~/Documents/blabla')
runApp('~/Documents/blabla')
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
gcaApp()
devtools::load_all()
install.packages("BAPC", repos = "http://R-Forge.R-project.org")
gcaApp()
devtools::load_all()
gcaApp()
runApp('~/Documents/blabla')
runApp('~/Documents/blabla')
runApp('~/Documents/blablabla')
runApp('~/Documents/blablabla')
runApp('~/Documents/blablabla')
runApp('~/Documents/blablabla')
runApp('~/Documents/blablabla')
?column
runApp('~/Documents/blablabla')
runApp('~/Documents/blablabla')
runApp('~/Documents/blablabla')
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaPackage()
gcaApp()
devtools::load_all()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
devtools::load_all()
gcaApp()
